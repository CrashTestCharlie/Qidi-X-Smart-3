[gcode_macro PRINT_START]
# Orca Slicer Machine Start G-code:
# PRINT_START EXTRUDER_TEMP=[nozzle_temperature_initial_layer] BED_TEMP=[bed_temperature_initial_layer_single]
# Note about SOAK_TIME:
# By default it is set for 2 minutes. By creating a new printer profile and
# adding SOAK_TIME=<minutes> to the PRINT_START macro you can choose your
# heat soak time when slicing.
description: Initial print setup
rename_existing: qidi_PRINT_START
gcode:
    # set variables
    {% set target_bed = params.BED_TEMP|int %}
    {% set target_extruder = params.EXTRUDER_TEMP|int %}
    {% set soak_minutes = params.SOAK_TIME | default(2) | int %}
    {% set soak_milliseconds = soak_minutes * 60 * 1000 %}
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

    # start bed heating
    M140 S{target_bed}

    # home and center toolhead
    G28
    G90
    G0 X{x_wait} Y{y_wait} Z15 F5000

    # wait for bed temp, then soak
    M190 S{target_bed}
    {% if soak_minutes > 0 %}
        RESPOND PREFIX="Startup:" MSG="Heat soaking: {soak_minutes}m"
        G4 P{soak_milliseconds}
    {% endif %}

    # adaptive bed mesh
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE

    # wait for nozzle temp
    M109 S{target_extruder}

    # adaptive purge
    LINE_PURGE

[gcode_macro PRINT_END]
description: After print clean up
rename_existing: qidi_PRINT_END
gcode:
    # set variables
    {% set fan_timeout = params.FAN_TIMEOUT | default(60) | int %}
    {% set extruder_temp = printer.extruder.temperature %}
    {% set extruder_min_temp = printer.configfile.settings.extruder.min_extrude_temp %}
    {% set x_center = printer.toolhead.axis_maximum.x | float / 2 %}
    {% set y_center = printer.toolhead.axis_maximum.y | float / 2 %}
    {% set z_loc = printer.gcode_move.position.z %}
    {% set z_end = printer.toolhead.axis_maximum.z - 5 %}

    # retract if hot
    {% if extruder_temp > extruder_min_temp %}
        RESPOND PREFIX="Ending:" MSG="retracting filament"
        M83
        G0 E-1.5 F20
    {% endif %}

    # heaters off
    RESPOND PREFIX="Ending:" MSG="heaters off"
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0

    # lower bed if not low
    {% if z_loc < z_end %}
        RESPOND PREFIX="Ending:" MSG="lowering bed"
        G90
        G0 Z{z_end} F1000
    {% endif %}

    # park toolhead
    RESPOND PREFIX="Ending:" MSG="parking toolhead"
    G90
    G0 X{x_center} Y{y_center} F5000
    # stop motors
    M84

    # clear pause state in case of cancel after pause
    CLEAR_PAUSE
    # set timeout back to configured value
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}

    # use part fan for cooldown
    M106
    # delay fan shutdown
    UPDATE_DELAYED_GCODE ID=DELAYED_PART_FAN_SHUTDOWN DURATION={fan_timeout}
    UPDATE_DELAYED_GCODE ID=AUTO_EXHAUST_SHUTDOWN DURATION={fan_timeout * 5}

    # reset speed and extruder overrides
    M220 S100
    M221 S100

[delayed_gcode DELAYED_PART_FAN_SHUTDOWN]
gcode:
    M106 S0

[delayed_gcode AUTO_EXHAUST_SHUTDOWN]
gcode:
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    ; check that zhop doesn't exceed z max
    {% if (printer.gcode_move.position.z) < printer.toolhead.axis_maximum.z-20 %}
        G1 Z150 F600
    {% endif %}
    G1  X0 Y0 F7800
    M107
    M106 T-2 S0

    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    ; z hop amount
    {% set z = params.Z|default(50)|int %}

    {% if printer['pause_resume'].is_paused|int == 0 %}
        ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
        ; set hotend temp variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
        ; disable filament sensor
#       SET_FILAMENT_SENSOR SENSOR=fila ENABLE=0
        ; save current print position for resume
        SAVE_GCODE_STATE NAME=PAUSE
        ; pause print
        BASE_PAUSE
        ; check that zhop doesn't exceed z max
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
            ; relative positioning
            G91
            ; raise Z up by z hop amount
            G1 Z{z} F900
        {% else %}
            ; if z max is exceeded, show message and set zhop value for resume to 0
#           { action_respond_info("Pause zhop exceeds maximum Z height.") }
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        SAVE_GCODE_STATE NAME=PAUSEPARK2
        ; absolute positioning
        G90
        ; park toolhead at front center
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} F6000
        ; save parked position in case toolhead is moved during the pause
        ; (otherwise the return zhop can error)
        SAVE_GCODE_STATE NAME=PAUSEPARK
        ; turn off hotend
        M104 S0
        ; set timeout to 12 hours
        SET_IDLE_TIMEOUT TIMEOUT=86400
        SET_STEPPER_ENABLE STEPPER=extruder enable=0
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    ; hotend prime amount (in mm)
    {% set e = params.E|default(2.5)|int %}

    {% if printer['pause_resume'].is_paused|int == 1 %}
         ; enable filament sensor
#        SET_FILAMENT_SENSOR SENSOR=fila ENABLE=1
        ; reset LCD color
        #INITIAL_RGB
        ; set timeout back to configured value
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
        {% if etemp > 0 %}
            ; wait for hotend to heat back up
            M109 S{etemp|int}
        {% endif %}
        ; go back to parked position in case toolhead was moved during pause
        ; (otherwise the return zhop can error)
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
        ; relative positioning
        G91
        ; relative extruder positioning
        M83
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            ; prime nozzle by E, lower Z back down
            G1  E{e} F900
#        {% else %}
             ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
#            G1 Z{zhop * -1} F900
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK2 MOVE=1 MOVE_SPEED=100
        ; restore position
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
        ; resume print
        BASE_RESUME
    {% endif %}

##归零流程修改 / Modification of the zeroing process
[homing_override]
set_position_X:0
set_position_y:0
set_position_z:0
axes:xy
gcode:
    {% set HOME_CUR = 1 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
    {% set RUN_CUR = driver_config.run_current %}
    {% set HOLD_CUR = driver_config.hold_current %}

    {% if params.X is defined %}
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR * 0.8}
        G28 X
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
        BEEP I=1 DUR=100
        G1 X10 F1200
    {% endif %}

    {% if params.Y is defined %}
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR * 0.9}
        G28 Y
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
        BEEP I=1 DUR=100
        G1 Y10 F1200
    {% endif %}

    {% if params.Z is defined %}
        # G90
        # G1 X{printer.toolhead.axis_maximum.x/2 - printer.probe["x_offset"]} Y{printer.toolhead.axis_maximum.y/2 - printer.probe["y_offset"]} F7800
        # G91

        G28 Z
        G1 Z20 F480
        BEEP I=1 DUR=100
    {% endif %}

    {% if params.X is undefined %}
        {% if params.Y is undefined %}
            {% if params.Z is undefined %}
                G91
                #    G1 Z5 F600
                G1 X10 F2400
                G1 Y10 F2400
                G4 P2000

                SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR * 0.8}
                G28 X
                SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
                BEEP I=1 DUR=100
                G1 X10 F1200

                SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR * 0.9}
                G28 Y
                SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
                BEEP I=1 DUR=100

                G90
                G1 X{printer.toolhead.axis_maximum.x/2 - printer.probe["x_offset"]} Y{printer.toolhead.axis_maximum.y/2 - printer.probe["y_offset"]} F7800
                G91

                G28 Z
                BEEP I=1 DUR=100
                G1 Z50  F480
            {% endif %}
        {% endif %}
    {% endif %}

    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR}
    M204 S10000

    G90
    #    G1 X0 Y0 F7800
